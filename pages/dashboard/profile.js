import Dashboard from "../../components/DashboardNavigation";
import { useSession, getSession } from "next-auth/react";
import { BiPencil, BiSave } from "react-icons/bi";
import Head from "next/head";
import { useState } from "react";
import Image from "next/image";
import axios from "axios";
import Link from "next/link";
import { useFormik } from "formik";

export default function Profile({ userlist }) {
	const { data: session, status } = useSession();
	const [edit, setEdit] = useState(false);
	const allowEdit = () => setEdit(!edit);

	for (let i = 0; i < userlist.length; i++) {
		if (userlist[i].name === session.user.name) {
			var user = userlist[i];
		}
	}

	const formik = useFormik({
		initialValues: {
			name: user.name,
			surname: user.surname,
			email: user.email,
			password: user.unhashed_psswd,
		},
	});

	if (status === "authenticated") {
		return (
			<div className="dark:bg-[url('/slider/dark_bg.jpg')] bg-[url('/slider/profile_back.jpg')] min-h-screen h-full bg-cover overflow-x-hidden lg:bg-gradient-to-br dark:lg:bg-gradient-to-br dark:lg:from-gray-600 lg:from-cyan-100 dark:lg:to-gray-900 dark:md:from-gray-600  dark:md:to-gray-900 lg:to-blue-300 md:bg-gradient-to-br dark:md:bg-gradient-to-br md:from-cyan-100 md:to-blue-300">
				<Head>
					<title>Ilife: Profile</title>
					<meta name="description" content="Generated by create next app" />
					<link rel="icon" href="/favicon_io/favicon.ico" />
				</Head>
				<Dashboard />
				<main className="mx-2 mt-28 mb-4 lg:ml-44 lg:mr-2 lg:mx-0 lg:my-0 lg:mt-7">
					<div className="flex flex-row items-center justify-start gap-4 mb-5 bg-slate-50 dark:bg-card-dark origin-left w-72 rounded-lg shadow-md p-3 text-base">
						<img
							className="w-12 rounded-xl"
							src={session.user.image ?? "../avatar.jpg"}
						></img>
						<span className="font-semibold">
							{user.name} {user.surname}
						</span>
					</div>
					<section className="flex gap-16 flex-wrap">
						<div className="dashboard_cards">
							<Image
								className="absolute -top-1 left-0 -z-10 opacity-30"
								src="/blob.svg"
								width={270}
								height={270}
								alt="blob"
							/>

							<h1 className="font-bold text-xl lg:text-2xl mb-10 ">
								User Information
							</h1>
							<div>
								<form
									className="flex flex-col gap-6 mb-6"
									onSubmit={formik.handleSubmit}
									method="put"
									name="info"
								>
									<label className="flex justify-between lg:gap-10 items-center font-semibold">
										Name:
										<input
											disabled={edit ? false : true}
											className="text-gray-600 dark:text-gray-300 p-2 w-3/5 rounded-md"
											{...formik.getFieldProps("name")}
										></input>
									</label>
									<label className="flex justify-between lg:gap-10 items-center font-semibold">
										Last Name:
										<input
											disabled={edit ? false : true}
											className="text-gray-600 dark:text-gray-300 p-2 w-3/5 rounded-md"
											{...formik.getFieldProps("surname")}
										></input>
									</label>
									<label className="flex justify-between lg:gap-10 items-center font-semibold">
										Email:
										<input
											disabled={edit ? false : true}
											className="text-gray-600 dark:text-gray-300 p-2 w-3/5 rounded-md"
											{...formik.getFieldProps("email")}
										></input>
									</label>
									<label className="flex justify-between lg:gap-10 items-center font-semibold">
										Password:
										<input
											type={edit ? "text" : "password"}
											disabled={edit ? false : true}
											className="text-gray-600 dark:text-gray-300 p-2 w-3/5 rounded-md"
											{...formik.getFieldProps("password")}
										></input>
									</label>
									{edit === false ? (
										<div className="flex flex-row gap-3 justify-end">
											<div
												className=" bg-icons text-white text-2xl p-3 rounded-3xl hover:rounded-xl transition-all duration-200 ease-linear cursor-pointer"
												onClick={allowEdit}
											>
												<BiPencil />
											</div>
										</div>
									) : (
										<div className="flex flex-row gap-3 justify-end">
											<button
												className=" bg-icons text-white text-2xl p-3 rounded-3xl hover:rounded-xl transition-all duration-200 ease-linear cursor-pointer"
												onClick={allowEdit}
												formAction="submit"
												type="submit"
												form="info"
											>
												<BiSave />
											</button>
										</div>
									)}
								</form>
							</div>
						</div>
						<div className="dashboard_cards">
							<Image
								className="absolute -top-0 -left-24 -z-10 opacity-30"
								src="/blob1.svg"
								width={370}
								height={370}
								alt="blob"
							/>
							<h1 className="font-bold text-xl lg:text-2xl mb-10">
								Become a seller
							</h1>
							<div className="mb-12 flex flex-col gap-11">
								<p className="font-semibold">Do you want to become a seller?</p>
								<p>
									Click a button bellow to begin earning money <br></br> with
									Ilife!
								</p>
							</div>
							<Link href="/seller">
								<button
									className="bg-icons text-white px-4 py-2 rounded-3xl font-semibold float-right hover:rounded-xl transition-all duration-200 ease-linear"
									formAction="submit"
									type="submit"
								>
									Become a seller
								</button>
							</Link>
						</div>
					</section>
				</main>
			</div>
		);
	}
}

export async function getServerSideProps({ req }) {
	const session = await getSession({ req });
	const res = await axios.get(
		`https://i-life-kfnf.vercel.app//api/auth/signup`,
	);

	if (!session) {
		return {
			redirect: {
				destination: "/login",
				pernament: false,
			},
		};
	}

	return {
		props: { session, userlist: res.data },
	};
}
